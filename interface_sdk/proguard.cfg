#// jar包所在地址
-injars in
#// 输出地址
-outjars out
#// 引用的库的jar，用于解析injars所指定的jar类
-libraryjars 'D:\Android\android-sdk-windows\platforms\android-15\android.jar'
-optimizationpasses 5
#// 混淆时不会产生形形色色的类名
-dontusemixedcaseclassnames
#// 指定不去忽略非公共的库类
-dontskipnonpubliclibraryclasses
#// 不预校验
-dontpreverify
-verbose
#// 优化
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

#// 不进行混淆保持原样
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class com.android.vending.licensing.ILicensingService
#// 所有方法不进行混淆
-keep public abstract interface com.asqw.android.Listener{
    public protected <methods>;
}

#// 对该方法不进行混淆
-keep public class com.asqw.android{
    public void Start(java.lang.String);
}

#// 保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）
-keepclasseswithmembernames class * {
    native <methods>;
}

#// 保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在
-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

#// 保护指定类的成员，如果此类受到保护他们会保护的更好
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

#// 保护指定的类文件和类的成员
-keep class * implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator *;
}
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}