apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23

    }

    buildTypes {
//        release {
//            // 不显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "false"
//            //混淆
//            minifyEnabled false
//            //Zipalign优化
//            zipAlignEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }

        debug {
//            // 显示Log
//            buildConfigField "boolean", "LEO_DEBUG", "true"
//            versionNameSuffix "-debug"
//            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false

            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions.encoding = 'UTF-8'
    lintOptions {
        abortOnError false
    }

    allprojects {
        repositories {
            jcenter()
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile files('src/main/libs/commons-net-3.5.jar')
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
}

def SDK_BASENAME = "sdk";
def SDK_VERSION = "_V0.1.8";
def sdkDestinationPath = "build";
def zipFile = file('build/intermediates/bundles/default/classes.jar')

task deleteBuild(type: Delete) {
//    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
    delete sdkDestinationPath + SDK_BASENAME + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main',includes: ['assets/**'])
//    baseName = SDK_BASENAME + SDK_VERSION
    baseName = SDK_BASENAME
    destinationDir = file(sdkDestinationPath)
}

//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    options.encoding = "UTF-8"
//
//    from androidJavadocs.destinationDir
//}

makeJar.dependsOn(deleteBuild, build)
